load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_library")
load("@npm//@bazel/concatjs:index.bzl", "concatjs_devserver")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "pkg_web")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("@npm//@babel/cli:index.bzl", "babel")
load("//tools:angular_ts_library.bzl", "ng_ts_library")
load("//tools:insert_html_assets.bzl", "insert_html_assets")
load("//tools:ngsw_config.bzl", "ngsw_config")

package(default_visibility = ["//visibility:public"])

exports_files(["ngsw-config.json"])

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = ["//:tsconfig"],
)

ts_config(
    name = "tsconfig_server",
    src = "tsconfig.server.json",
    deps = ["//:tsconfig"],
)

ts_config(
    name = "tsconfig_test",
    src = "tsconfig.test.json",
    deps = ["//services/client:tsconfig"],
)

sass_binary(
    name = "styles",
    src = "styles.sass",
)

ts_library(
    name = "initialize_testbed",
    testonly = True,
    srcs = ["initialize_testbed.ts"],
    tsconfig = "tsconfig",
    deps = [
        "@npm//@angular/core",
        "@npm//@angular/platform-browser-dynamic",
    ],
)

ng_ts_library(
    name = "dev_src",
    srcs = ["main.dev.ts"],
    tsconfig = "tsconfig",
    deps = [
        "//services/client/app:dev",
        "@npm//@angular/platform-browser",
    ],
)

insert_html_assets(
    name = "inject_scripts_for_dev",
    outs = ["dev/index.html"],
    asset_paths = [
        "$(execpath :styles.css)",
        "$(execpath @npm//:node_modules/zone.js/dist/zone.min.js)",
        "./_/ts_scripts.js",
    ],
    data = [
        "main.html",
        "styles.css",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
    html_file = "main.html",
)

concatjs_devserver(
    name = "dev_server",
    additional_root_paths = ["services/client/dev"],
    entry_module = "fullstack-bazel/services/client/main.dev",
    port = 4200,
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        "//tools:rxjs_umd_modules",
    ],
    static_files = [
        "@npm//:node_modules/zone.js/dist/zone.min.js",
        "//services/client/assets",
        "inject_scripts_for_dev",
        "styles.css",
        "favicon.ico",
    ],
    deps = ["//services/client:dev_src"],
)

ng_ts_library(
    name = "prod_src",
    srcs = ["main.prod.ts"],
    tsconfig = "tsconfig",
    deps = [
        "//services/client/app:prod",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "//tools:rollup.config.js",
    entry_points = {
        "main.prod.ts": "index.es2015",
    },
    output_dir = True,
    deps = [
        "prod_src",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(execpath :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--presets=@babel/preset-env",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        "bundle-es2015",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
)

terser_minified(
    name = "bundle-es2015.min",
    src = "bundle-es2015",
    config_file = "//tools:terser.config.json",
)

terser_minified(
    name = "bundle-es5.min",
    src = "bundle-es5",
    config_file = "//tools:terser.config.json",
)

insert_html_assets(
    name = "asset_injected_index_html",
    # pkg_web rule will re-root paths that start with _{name} by default
    # _web_app/services/client/index.html -> index.html in the web package
    outs = ["_web_app/services/client/index.html"],
    asset_paths = [
        "$(execpath styles.css)",
        "$(execpath manifest.webmanifest)",
        "$(execpath @npm//:node_modules/zone.js/dist/zone.min.js)",
        "$(execpath bundle-es2015.min)/index.es2015.js",
        "$(execpath bundle-es5.min)/index.es2015.js",
    ],
    data = [
        "bundle-es2015.min",
        "bundle-es5.min",
        "main.html",
        "manifest.webmanifest",
        "styles.css",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
    html_file = "main.html",
)

pkg_web(
    name = "web_app",
    srcs = [
        "asset_injected_index_html",
        "bundle-es2015.min",
        "bundle-es5.min",
        "favicon.ico",
        "main.html",
        "robots.txt",
        "styles.css",
        "//services/client/assets",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
)

history_server(
    name = "app_server",
    data = ["web_app"],
    templated_args = ["-a $$(rlocation $(rootpath :web_app))"],
)

insert_html_assets(
    name = "inject_scripts_for_prod",
    outs = ["prod/index.html"],
    asset_paths = [
        "$(execpath styles.css)",
        "$(execpath @npm//:node_modules/zone.js/dist/zone.min.js)",
    ],
    data = [
        "bundle-es2015.min",
        "bundle-es5.min",
        "main.html",
        "manifest.webmanifest",
        "styles.css",
        "@npm//:node_modules/core-js/client/core.min.js",
        "@npm//:node_modules/systemjs/dist/system.js",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
    html_file = "main.html",
    manifest = "manifest.webmanifest",
    nomodule_scripts = [
        "$(execpath @npm//:node_modules/systemjs/dist/system.js)",
        "$(execpath @npm//:node_modules/core-js/client/core.min.js)",
        "$(execpath bundle-es5.min)/index.es2015.js",
    ],
    scripts = [
        "$(execpath bundle-es2015.min)/index.es2015.js",
    ],
)

pkg_web(
    name = "pwa_web",
    srcs = [
        "bundle-es2015.min",
        "bundle-es5.min",
        "inject_scripts_for_prod",
        "favicon.ico",
        "manifest.webmanifest",
        "robots.txt",
        "styles.css",
        "//services/client/assets",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
        "@npm//:node_modules/@angular/service-worker/ngsw-worker.js",
        # Include polyfills that will be requested by old browsers
        "@npm//:node_modules/systemjs/dist/system.js",
        "@npm//:node_modules/core-js/client/core.min.js",
    ],
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
        "npm/node_modules/@angular/service-worker",
    ],
)

ngsw_config(
    name = "pwa",
    src = ":pwa_web",
    config = "ngsw-config.json",
    index_html = "inject_scripts_for_prod",
)

history_server(
    name = "pwa_server",
    data = ["pwa"],
    templated_args = ["-a $$(rlocation $(rootpath :pwa))"],
)

ts_library(
    name = "server_lib",
    srcs = ["server.ts"],
    tsconfig = "tsconfig_server",
    deps = [
        "//services/client/app:server",
        "@npm//@angular/core",
        "@npm//@nguniversal/express-engine",
        "@npm//@types/express",
        "@npm//@types/node",
        "@npm//express",
        "@npm//tslib",
    ],
)

nodejs_binary(
    name = "client",
    data = [
        "pwa",
        "server_lib",
    ],
    entry_point = "server.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

nodejs_image(
    name = "prod_server_image",
    data = [
        "pwa",
        "server_lib",
    ],
    entry_point = "server.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

k8s_deploy(
    name = "kubernetes",
    images = {"client:placeholder_name": "prod_server_image"},
    template = "client.yaml",
)
