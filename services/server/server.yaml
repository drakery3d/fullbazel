apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
spec:
  selector:
    matchLabels:
      app: server
  replicas: 2
  template:
    metadata:
      labels:
        app: server
    spec:
      serviceAccountName: cloudsql-service-account
      containers:
        - name: server
          image: server:latest
          envFrom:
            - configMapRef:
                name: config
          env:
            - name: secrets_tokens_auth
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_tokens_auth
            - name: secrets_mysqlDatabase_password
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_mysqlDatabase_password
            - name: secrets_googleClientSecret
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_googleClientSecret
            - name: secrets_vapidPrivateKey
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_vapidPrivateKey
            - name: secrets_vapidPrivateKey
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_vapidPrivateKey
            - name: secrets_kafka_apiSecret
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: secrets_kafka_apiSecret

          # TODO make readiness probe work with cloudsql-proxy
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 3
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          # resources:
          #   requests:
          #     memory: 300Mi
          #     cpu: 100m
          #   limits:
          #     memory: 1000Mi
          #     cpu: 500m

        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.20.2
          command:
            - '/cloud_sql_proxy'

            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            # - "-ip_address_types=PRIVATE"

            # Replace DB_PORT with the port the proxy should listen on
            # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
            # TODO replace instance with terraform output
            # https://stackoverflow.com/a/56688223/8586803
            # https://github.com/NeonLaw/codebase/blob/4a7e832497e81bc052069fb8b5c52fb64064c37d/infrastructure/kubernetes/modules/server_deployment/main.tf#L228
            - '-instances=fullstack-bazel-306720:europe-west3:mysql-instance-a80bb45e=tcp:3306'
          securityContext:
            # The default Cloud SQL proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true

      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: cloud.google.com/gke-preemptible
                    operator: Exists
              weight: 100

---
apiVersion: v1
kind: Service
metadata:
  name: server
spec:
  selector:
    app: server
  ports:
    - name: ws
      port: 3000
      targetPort: 3000
  type: NodePort

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: server
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: server
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 75
