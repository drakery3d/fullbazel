load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_library")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")

package(default_visibility = ["//visibility:public"])

ENVIRONMENTS = [
    "dev",
    "prod",
]

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = ["//:tsconfig"],
)

filegroup(
    name = "config_jsons",
    srcs = glob(
        include = ["configs/*"],
        exclude = ["**/*.schema.json"],
    ),
)

filegroup(
    name = "secrets_jsons",
    srcs = glob(
        include = ["secrets/*"],
        exclude = ["**/*.schema.json"],
    ),
)

# Typescript library containing the code used by many
# of the targets in this file
ts_library(
    name = "generate_lib",
    srcs = glob(
        include = ["**/*.ts"],
        exclude = [
            "index.ts",
            "config.ts",
        ],
    ),
    tsconfig = "tsconfig",
    deps = [
        "@npm//@types/node",
        "@npm//ts-morph",
        "@npm//yaml",
    ],
)

# Generate a Kubernetes ConfigMap and a Secret for production
# The generated yaml files are then fed into a k8s_deploy rule
nodejs_binary(
    name = "generate_k8s_configs_bin",
    data = [
        "config_jsons",
        "generate_lib",
    ],
    entry_point = "generate-k8s-configs.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

genrule(
    name = "generate_k8s_configs",
    outs = ["prod.config.yaml"],
    cmd = "$(location generate_k8s_configs_bin) $(RULEDIR)",
    tools = ["generate_k8s_configs_bin"],
)

k8s_deploy(
    name = "config",
    template = "prod.config.yaml",
)

nodejs_binary(
    name = "generate_k8s_secrets_bin",
    data = [
        "generate_lib",
        "secrets_jsons",
    ],
    entry_point = "generate-k8s-secrets.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

genrule(
    name = "generate_k8s_secrets",
    outs = ["prod.secrets.yaml"],
    cmd = "$(location generate_k8s_secrets_bin) $(RULEDIR)",
    tools = ["generate_k8s_secrets_bin"],
)

k8s_deploy(
    name = "secrets",
    template = "prod.secrets.yaml",
)

# Generate a ".env" file with key value pairs of
# environment values like: 'PASSWORD=abc'
# It is read by the docker-compose.yaml file
nodejs_binary(
    name = "generate_docker_compose_env_bin",
    data = [
        "config_jsons",
        "generate_lib",
        "secrets_jsons",
    ],
    entry_point = "generate-dc-env.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

genrule(
    name = "generate_docker_compose_env",
    outs = ["docker-compose.env"],
    cmd = "$(location generate_docker_compose_env_bin) $@",
    tools = ["generate_docker_compose_env_bin"],
)

# We take the configs and secrets and generate
# a Typescript type for all the available keys
# This enables intellisense when getting config values
nodejs_binary(
    name = "generate_flat_config_keys_bin",
    data = [
        "config_jsons",
        "generate_lib",
        "secrets_jsons",
    ],
    entry_point = "generate-flat-config-keys.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

genrule(
    name = "generate_flat_config_keys",
    outs = ["flat-config-keys.ts"],
    cmd = "$(location generate_flat_config_keys_bin) $(RULEDIR)",
    tools = ["generate_flat_config_keys_bin"],
)

ts_library(
    name = "flat_config_keys",
    srcs = ["flat-config-keys.ts"],
    module_name = "@generated/config",
    tsconfig = "tsconfig",
)

# We take a subset of the configurations in /configs to generate
# a Typescript environment object, which can be used in the client application
nodejs_binary(
    name = "generate_client_env_bin",
    data = [
        "config_jsons",
        "generate_lib",
    ],
    entry_point = "generate-client-envs.ts",
    templated_args = ["--bazel_patch_module_resolver"],
)

CLIENT_ENV_FILES = ["client.environment.%s.ts" % s for s in ENVIRONMENTS]

genrule(
    name = "generate_client_env",
    outs = CLIENT_ENV_FILES,
    cmd = "$(location generate_client_env_bin) $(RULEDIR)",
    tools = ["generate_client_env_bin"],
)

ts_library(
    name = "client_environments",
    srcs = CLIENT_ENV_FILES,
    module_name = "@generated/config",
    tsconfig = "tsconfig",
)

# A small Typescript library for backend services to access
# configurations and secrets at runtime
ts_library(
    name = "config_lib",
    srcs = [
        "config.ts",
        "index.ts",
    ],
    module_name = "@libs/config",
    tsconfig = "tsconfig",
    visibility = ["//services:__subpackages__"],
    deps = [
        "flat_config_keys",
        "@npm//@types/node",
    ],
)
